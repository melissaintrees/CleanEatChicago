{"version":3,"sources":["assets/javascript/app.js"],"names":["$","document","ready","console","log","moment","format","addResultsToPage","r","initMap","centerMap","lat","location","coordinates","lng","map","google","maps","Map","getElementById","zoom","center","Marker","position","pass","fail","i","length","result","results","includes","passTableRow","tableData1","tableData2","tableData3","tableData4","text","inspection_date","inspection_type","passTableBody","append","aka_name","failTableRow","failTableBody","violations","show","modal","parallax","hide","on","restaurantName","val","trim","validateInput","Materialize","toast","empty","chicagoCall","currentMoment","queryURL","finalURL","getJSON","lengthCheck","licenseArray","multiRestaurantArray","license_","push","license","address","name","dba_name","latitude","longitude","zip","html","userPickRestaurant","multipleLocationsModal","link","addClass","attr","licenseSelection","selectedResponse"],"mappings":"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","file":"app.3d6b536e.js","sourceRoot":"..","sourcesContent":["\n$(document).ready(function () {\n    // https://momentjscom.readthedocs.io/en/latest/moment/04-displaying/01-format/\n    console.log(moment().format(\"YYYY-MM-DD\" + \"T\" + \"hh:mm:ss\"));\n    // Needs to be global for use in google places fxn\n    var restaurantNameGlobal = \"\";\n    // Modal function needed by Materialize\n    $('.modal').modal();\n    $(\"#modal2\").modal(\"open\");\n\n    // Parallex call needed by Materialize\n    $('.parallax').parallax();\n\n\n    // $('.tap-target').tapTarget(\"open\");\n    // Prints default page to screen on page load\n    function defaultPage() {\n        $(\".resultsDiv\").hide();\n    };\n    defaultPage();\n    // Function run when the user hits submit\n    $(\"#submitBtn\").on(\"click\", function () {\n        var restaurantName = $(\"#rest-search-input\").val().trim();\n        restaurantNameGlobal = restaurantName;\n        // Validate Input\n        validateInput(restaurantName);\n    });\n    // Function validates user input and if valid, calls Fxn to run API, else prompts user to retry\n    function validateInput(restaurantName) {\n        if (restaurantName == \"\") {\n            Materialize.toast(\"Please enter a Restaurant Name!\", 4000);\n        } else {\n            // Empty Search Fields and Results for next search\n            $(\"#passTableBody\").empty();\n            $(\"#failTableBody\").empty();\n            $(\"#rest-search-input\").val(\"\");\n            chicagoCall(restaurantName);\n        };\n    };\n    // Call City of Chicago Health Data API\n    function chicagoCall(restaurantName) {\n        var currentMoment = moment().format(\"YYYY-MM-DD\" + \"T\" + \"hh:mm:ss\")\n        var baseURL = 'https://data.cityofchicago.org/resource/cwig-ma7x.json';\n        var queryURL = '?$where=inspection_date between \"2016-01-01T12:00:00\" and \"' + currentMoment + '\"' +\n            ' and starts_with(dba_name, upper(\"' +\n            restaurantName +\n            '\"))';\n        console.log(queryURL);\n        var finalURL = baseURL + queryURL;\n        $.getJSON(finalURL, function (r) {\n            // Check # of restaurants returned\n            lengthCheck(r);\n        });\n    };\n    // This function checks how many restaurants are returned by the City API, if there are multiple, it prompts\n    // the user to select the restaurant they want. \n    function lengthCheck(r) {\n        // If JSON object is empty, no restaurants were found\n        if (r.length == 0) {\n            Materialize.toast(\"No Restaurants by that name were found in that area!\", 4000);\n        }\n        // If JSON object is not empty, find out how many unique restaurants are in the response.\n        else {\n            var licenseArray = [];\n            var multiRestaurantArray = [];\n            for (var i = 0; i < r.length; i++) {\n                if (!licenseArray.includes(r[i].license_)) {\n                    licenseArray.push(r[i].license_);\n                    multiRestaurantArray.push({\n                        license: r[i].license_,\n                        address: r[i].address,\n                        name: r[i].dba_name,\n                        latitude: r[i].latitude,\n                        longitude: r[i].longitude,\n                        zip: r[i].zip\n                    });\n                };\n            };\n            if (licenseArray.length == 1) {\n                addResultsToPage(r);\n            } else if (licenseArray.length > 1) {\n                $(\"#multipleLocationsModal\").html(\"\");\n                userPickRestaurant(multiRestaurantArray, r);\n            };\n        };\n    };\n    // Function which prints multiple restaurants to the page and allows user to choose\n    function userPickRestaurant(multiRestaurantArray, r) {\n        var multipleLocationsModal = $(\"#multipleLocationsModal\");\n        for (var i = 0; i < multiRestaurantArray.length; i++) {\n            var link = $(\"<a>\");\n            link.text(multiRestaurantArray[i].address);\n            link.addClass(\"collection-item collection-item2 multipleResults\");\n            link.attr(\"data-license\", multiRestaurantArray[i].license);\n            multipleLocationsModal.append(link);\n            $(\"#modal1\").modal('open');\n        };\n        // On click listener\n        $(\".multipleResults\").on(\"click\", function () {\n            var licenseSelection = $(this).attr(\"data-license\");\n            var selectedResponse = [];\n            for (var i = 0; i < r.length; i++) {\n                if (licenseSelection == r[i].license_) {\n                    selectedResponse.push(r[i]);\n                };\n            };\n            $(\"#modal1\").modal('close');\n            addResultsToPage(selectedResponse);\n        });\n    };\n    // Function prints results to page after all validation and checking.\n    function addResultsToPage(r) {\n        initMap(r);\n        // placeID(r);\n        var pass = 0;\n        var fail = 0;\n        console.log(r);\n        for (var i = 0; i < r.length; i++) {\n            var result = r[i].results;\n            if (result.includes(\"Pass\")) {\n                pass++\n                var passTableRow = $(\"<tr>\");\n                var tableData1 = $(\"<td>\");\n                var tableData2 = $(\"<td>\");\n                var tableData3 = $(\"<td>\");\n                var tableData4 = $('<td>');\n                tableData1.text(moment(r[i].inspection_date).format(\"MM-DD-YYYY\"));\n                tableData2.text(r[i].results);\n                tableData3.text(r[i].inspection_type);\n                // Instead of displaying the violation, reward Restaurants' passed inspections by hiding the inspection data.\n                // tableData4.text(r[i].violations);\n                // if they passed with \"pass\" they get a two clean thumbs up\n                if (r[i].results === \"Pass\") {\n                    tableData4.text(\"Two Clean Thumbs Up!\")\n                } else {\n                    // if they passed with \"pass with conditions\" they get a \"One Clean Thumb Up\"\n                    tableData4.text(\"One Clean Thumb Up!\")\n                }\n\n                var passTableBody = $(\"#passTableBody\");\n                passTableRow.append(tableData1, tableData2, tableData3, tableData4);\n                passTableBody.append(passTableRow);\n                // display the DBA name for the header of the map. \n                $(\"#rName\").text(r[i].aka_name);\n            } else if (result.includes(\"Fail\")) {\n                fail++;\n                console.log(fail);\n                var failTableRow = $(\"<tr>\");\n                var failTableBody = $(\"#failTableBody\");\n                var tableData1 = $(\"<td>\");\n                var tableData2 = $(\"<td>\");\n                var tableData3 = $(\"<td>\");\n                var tableData4 = $('<td class=\"tst\">');\n                tableData1.text(moment(r[i].inspection_date).format(\"MM-DD-YYYY\"));\n                tableData2.text(r[i].results);\n                tableData3.text(r[i].inspection_type);\n                tableData4.text(r[i].violations);\n                failTableRow.append(tableData1, tableData2, tableData3, tableData4);\n                failTableBody.append(failTableRow);\n            } else {\n                console.log(\"There has been an error with this restaurant\");\n            };\n        };\n        $(\"#totalPass\").text(pass);\n        $(\"#totalFail\").text(fail);\n        $(\".resultsDiv\").show();\n\n    };\n    // Function prints map to page\n    function initMap(r) {\n        let centerMap = {\n            lat: r[0].location.coordinates[0],\n            lng: r[0].location.coordinates[1]\n        };\n        console.log(centerMap)\n\n\n        var map = new google.maps.Map(document.getElementById('map'), {\n            zoom: 15,\n            center: centerMap\n        });\n        var marker = new google.maps.Marker({\n            position: centerMap,\n            map: map\n        });\n\n    };\n    // At some point we would love to put this back in and set up a Express Node Server in place of a proxy server.\n    // Function which queries Google PlaceID to retrieve placeID\n    // function placeID(v) {\n    //     var baseURL = 'https://maps.googleapis.com/maps/api/place/textsearch/json?key=AIzaSyDHoRALByDMw9kuV4wjKPK22BqM8AahDgo&';\n    //     var queryURL = 'query=' + restaurantNameGlobal + '&location=' + v[0].location.coordinates[1] + ',' + v[0].location.coordinates[0] + '&radius=50';\n    //     console.log(baseURL + queryURL);\n    //     // var proxyURL = 'https://ghastly-eyeballs-78637.herokuapp.com/';\n    //     var fullURL = baseURL + queryURL;\n    //     $.getJSON(fullURL, function (r) {\n    //         if (r.results.length == 0) {\n    //             console.log(\"There is an error with the Google PlaceID Fxn, someone tell Ronak!\");\n    //         } else {\n    //             reviewsCall(r.results[0].place_id);\n\n    //         };\n    //     });\n    // };\n\n    // function reviewsCall(placeID) {\n    //     var baseURL = 'https://maps.googleapis.com/maps/api/place/details/json?key=AIzaSyDHoRALByDMw9kuV4wjKPK22BqM8AahDgo&';\n    //     var queryURL = \"placeid=\" + placeID;\n    //     // var proxyURL = 'https://ghastly-eyeballs-78637.herokuapp.com/';\n    //     var fullURL = baseURL + queryURL;\n    //     $.getJSON(fullURL, function (r) {\n    //         $(\"#rName\").text(r.result.name);\n    //         $(\"#address\").text(r.result.formatted_address);\n    //         $(\"#phone\").text(r.result.formatted_phone_number);\n    //         $(\"#googleRating\").text(r.result.rating);\n    //         for (var i = 0; i < r.result.opening_hours.weekday_text.length; i++) {\n    //             $(\"#hours\" + i).text(r.result.opening_hours.weekday_text[i]);\n    //         };\n    //         for (var i = 0; i < 3; i++) {\n    //             $(\"#reviewName\" + i).text(r.result.reviews[i].author_name);\n    //             $(\"#reviewText\" + i).text(r.result.reviews[i].text);\n    //             $(\"#reviewDate\" + i).text(r.result.reviews[i].relative_time_description);\n    //         };\n    //     });\n    // };\n    // End of Document Ready\n});\n"]}